name: makeit Actions
on: [push]
jobs:
  Install-Diskuv-OCaml:
    runs-on: windows-2019
    steps:
      - name: Filesystem Diagnostics
        # Without NTFS we will not get atomic file renames, and the errors at https://github.com/ocaml/ocaml/pull/1307 will occur.
        # On Windows here are a couple examples:
        #       ocamlc ocaml-lsp-server/vendor/merlin/src/dot-merlin/dot-protocol/.merlin_dot_protocol.objs/byte/dot_protocol.{cmi,cmti} (exit 2)
        #   (cd _build/default && D:\a\diskuv-ocaml-starter-ghmirror\diskuv-ocaml-starter-ghmirror\build\dev\Debug\_opam\bin\ocamlc.opt.exe -w -40 -w -a -g -bin-annot -I ocaml-lsp-server/vendor/merlin/src/dot-merlin/dot-protocol/.merlin_dot_protocol.objs/byte -I D:\a\diskuv-ocaml-starter-ghmirror\diskuv-ocaml-starter-ghmirror\build\dev\Debug\_opam\lib\csexp -I D:\a\diskuv-ocaml-starter-ghmirror\diskuv-oc[...]
        #   File "ocaml-lsp-server/vendor/merlin/src/dot-merlin/dot-protocol/dot_protocol.mli", line 1:
        #   Error: I/O error: ocaml-lsp-server/vendor/merlin/src/dot-merlin/dot-protocol/.merlin_dot_protocol.objs/byte\dot_protocol.cmi767a52.tmp: No such file or directory
        # and
        #       ocamlc expander/.ppx_sexp_conv_expander.objs/byte/ppx_sexp_conv_expander__Str_generate_sexp_grammar.{cmi,cmti} (exit 2)
        #   (cd _build/default && D:\a\diskuv-ocaml-starter-ghmirror\diskuv-ocaml-starter-ghmirror\build\windows_x86_64\Release\_opam\bin\ocamlc.opt.exe -w -40 -g -bin-annot -I expander/.ppx_sexp_conv_expander.objs/byte -I D:/a/diskuv-ocaml-starter-ghmirror/diskuv-ocaml-starter-ghmirror/build/windows_x86_64/Release/_opam/lib/ocaml\compiler-libs -I D:\a\diskuv-ocaml-starter-ghmirror\diskuv-ocaml-starter-g[...]
        #   File "expander/str_generate_sexp_grammar.mli", line 1:
        #   Error: I/O error: expander/.ppx_sexp_conv_expander.objs/byte\ppx_sexp_conv_expander__Str_generate_sexp_grammar.cmibe78ba.tmp: No such file or directory
        run: Get-Volume

      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true # Checkout the vendor/diskuv-ocaml submodule

      - name: Cache Diskuv OCaml Archives
        id: cache_diskuvocaml_archives
        uses: actions/cache@v2
        env:
          cache-name: diskuv-ocaml-archives
        with:
          path: |
            Programs-DiskuvOCaml.7z
            vcpkg.7z
            opam-root.7z
          key: ${{ runner.os }}-setup-${{ env.cache-name }}-dkml-${{ hashFiles('**/.dkmlroot') }}-submodule-${{ hashFiles('.git/modules/**/diskuv-ocaml/HEAD') }}

      - name: Setup CI Container/Virtual Machine for Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: .\vendor\diskuv-ocaml\installtime\windows\setup-machine.ps1 -SkipProgress -AllowRunAsAdmin -SilentInstall

      - name: Get Visual Studio Compatibility
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          $env:PSModulePath += "$([System.IO.Path]::PathSeparator)vendor\diskuv-ocaml\installtime\windows"
          Import-Module Machine # Use Get-CompatibleVisualStudios
          $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
          $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
          $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
          $VisualStudioProps

      - name: Setup CI User for Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          $global:RedeployIfExists = $true
          $global:IncrementalDiskuvOcamlDeployment = $true
          $ErrorActionPreference = "Continue"
          .\vendor\diskuv-ocaml\installtime\windows\setup-userprofile.ps1 -SkipProgress -AllowRunAsAdmin -ForceDeploymentSlot0 -Flavor CI -MSYS2Dir C:\msys64
          $SetupExitCode = $LastExitCode
          if ($SetupExitCode -ne 0) { # TODO: This could be part of something like: setup-userprofile.ps1 -PrintLogsOnError
            Write-Host "`n`n========= [START OF TROUBLESHOOTING] ===========`n`n"
            Get-ChildItem -Path "$env:LOCALAPPDATA\opam\log\*" -Include "*.env", "*.out" -Exclude "log-*.out", "log-*.env" | ForEach-Object { Write-Host "`n`n========= [TROUBLESHOOTING] $($_.FullName) ===========`n`n"; Get-Content -Path $_.FullName }

            # The next line is really an example ... if you need access to an extra log file that is produced by an Opam package's build scripts, then copy and paste the next line
            if (Test-Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log") { Write-Host "`n`n=========== [TROUBLESHOOTING] ocargs.log ==========="; Get-Content -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log"; }

            throw "setup-userprofile.ps1 failed with exit code $SetupExitCode. Scroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line"
          }

      - name: Archive Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          cd "$env:LOCALAPPDATA\Programs\DiskuvOCaml"; 7z a "$env:GITHUB_WORKSPACE\Programs-DiskuvOCaml.7z" .
          cd "$env:LOCALAPPDATA\vcpkg"               ; 7z a "$env:GITHUB_WORKSPACE\vcpkg.7z" .
          cd "$env:LOCALAPPDATA\opam"                ; 7z a "$env:GITHUB_WORKSPACE\opam-root.7z" .
          cd "$env:GITHUB_WORKSPACE"

      - name: Upload Diskuv OCaml into GitHub Workflow
        uses: actions/upload-artifact@v2
        with:
          name: diskuv-ocaml-installation
          path: |
            Programs-DiskuvOCaml.7z
            vcpkg.7z
            opam-root.7z
          retention-days: 1

  Build-And-Test:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - windows_x86
          - windows_x86_64
    runs-on: windows-2019
    needs: Install-Diskuv-OCaml
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download Diskuv OCaml Archives from GitHub Workflow
        uses: actions/download-artifact@v2
        with:
          name: diskuv-ocaml-installation

      - name: Expand Diskuv OCaml Archives
        run: |
          New-Item -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml" -ItemType Directory -Force | Out-Null
          New-Item -Path "$env:LOCALAPPDATA\vcpkg"                -ItemType Directory -Force | Out-Null
          New-Item -Path "$env:LOCALAPPDATA\opam"                 -ItemType Directory -Force | Out-Null
          cd "$env:LOCALAPPDATA\Programs\DiskuvOCaml"; 7z x -y -bt "$env:GITHUB_WORKSPACE\Programs-DiskuvOCaml.7z"
          cd "$env:LOCALAPPDATA\vcpkg"               ; 7z x -y -bt "$env:GITHUB_WORKSPACE\vcpkg.7z"
          cd "$env:LOCALAPPDATA\opam"                ; 7z x -y -bt "$env:GITHUB_WORKSPACE\opam-root.7z"
          cd "$env:GITHUB_WORKSPACE"

      - name: Cache Opam Switches
        id: cache_opam_switches
        uses: actions/cache@v2
        env:
          cache-name: cache-opam-switches
        with:
          path: |
            build/*/*/_opam
          key: ${{ runner.os }}-build-${{ env.cache-name }}-dkml-${{ hashFiles('**/.dkmlroot') }}-submodule-${{ hashFiles('.git/modules/**/diskuv-ocaml/HEAD') }}-opam-${{ hashFiles('**/.opam', '**/opam', '**.opam.lock', '**.opam.locked') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Add Diskuv System PATH
        # On desktop the Diskuv System PATH would be present (the installer asks the user to close all shells sessions and start again);
        # need to make sure the same thing happens in CI. Actually, since the installer is in the previous job, the System PATH is lost as
        # we are now in a subsequent job.
        run: |
          echo "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\bin" >> $env:GITHUB_PATH

      - name: Troubleshooting (example)
        if: "false" # change to "true" when you want to need to troubleshoot a package. Change the example script as well.
        run: |
          ./makeit shell SHELL_SCRIPTFILE=.github/workflows/troubleshoot-example-ppx_sexp_conv.sh

      - name: ./makeit build-${{ matrix.platform }}-Release
        run: |
          ./makeit build-${{ matrix.platform }}-Release DKML_BUILD_TRACE=ON DKML_BUILD_PRINT_LOGS_ON_ERROR=ON

      - name: ./makeit test
        run: |
          ./makeit test DKML_BUILD_TRACE=ON DKML_BUILD_PRINT_LOGS_ON_ERROR=ON

      - name: ./makeit dkml-report
        run: ./makeit dkml-report DKML_BUILD_TRACE=ON
