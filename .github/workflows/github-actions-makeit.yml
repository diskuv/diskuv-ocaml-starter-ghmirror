name: makeit Actions
on: [push]
env:
  DKML_BUILD_TRACE: "ON"
  DKML_BUILD_TRACE_LEVEL: "0" # Used only if DKML_BUILD_TRACE is ON. Higher is more verbose; "0" and "2" are the only values.
  DKML_BUILD_PRINT_LOGS_ON_ERROR: "ON"
jobs:
  Win32-Install-DKML:
    runs-on: windows-2019
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true # Checkout the vendor/diskuv-ocaml submodule

      - name: Cache Diskuv OCaml Archives
        id: cache_diskuvocaml_archives
        uses: actions/cache@v2
        env:
          cache-name: diskuv-ocaml-archives
        with:
          path: |
            Programs-DiskuvOCaml.7z
            vcpkg.7z
            opam-root.7z
          key: ${{ runner.os }}-setup-${{ env.cache-name }}-dkml-${{ hashFiles('**/.dkmlroot') }}-submodule-${{ hashFiles('.git/modules/**/diskuv-ocaml/HEAD') }}

      - name: Setup CI Container/Virtual Machine for Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: .\vendor\diskuv-ocaml\installtime\windows\setup-machine.ps1 -SkipProgress -AllowRunAsAdmin -SilentInstall

      - name: Get Visual Studio Compatibility
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          $env:PSModulePath += "$([System.IO.Path]::PathSeparator)vendor\diskuv-ocaml\installtime\windows"
          Import-Module Machine # Use Get-CompatibleVisualStudios
          $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
          $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
          $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
          $VisualStudioProps

      - name: Setup CI User for Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        env:
          DKML_BUILD_ROOT: ${{ runner.temp }} # Use short build directory to avoid Windows 260-character absolute path limit
        run: |
          # Strip PATH of all extraneous GitHub Actions programs except Git which is required for setup-userprofile.ps1
          $env:PATH=("C:\Program Files\Git\cmd;C:\Windows\System32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0")

          $global:RedeployIfExists = $true
          $global:IncrementalDiskuvOcamlDeployment = $true
          $ErrorActionPreference = "Continue"
          .\vendor\diskuv-ocaml\installtime\windows\setup-userprofile.ps1 -SkipProgress -AllowRunAsAdmin -ForceDeploymentSlot0 -Flavor CI -MSYS2Dir C:\msys64
          $SetupExitCode = $LastExitCode
          if ($SetupExitCode -ne 0) { # TODO: This could be part of something like: setup-userprofile.ps1 -PrintLogsOnError
            Write-Host "`n`n========= [START OF TROUBLESHOOTING] ===========`n`n"

            Write-Host "`n`n=========== [TROUBLESHOOTING] setup-userprofile.full.log ==========="; Get-Content -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\setup-userprofile.full.log";

            Get-ChildItem -Path "$env:LOCALAPPDATA\opam\log\*" -Include "*.env", "*.out" -Exclude "log-*.out", "log-*.env" | ForEach-Object { Write-Host "`n`n========= [TROUBLESHOOTING] $($_.FullName) ===========`n`n"; Get-Content -Path $_.FullName }

            # The next line is really an example ... if you need access to an extra log file that is produced by an Opam package's build scripts, then copy and paste the next line
            if (Test-Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log") { Write-Host "`n`n=========== [TROUBLESHOOTING] ocargs.log ==========="; Get-Content -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log"; }

            throw "setup-userprofile.ps1 failed with exit code $SetupExitCode. Scroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line"
          }

      - name: Archive Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          cd "$env:LOCALAPPDATA\Programs\DiskuvOCaml"; 7z a "$env:GITHUB_WORKSPACE\Programs-DiskuvOCaml.7z" .
          cd "$env:LOCALAPPDATA\vcpkg"               ; 7z a "$env:GITHUB_WORKSPACE\vcpkg.7z" .
          cd "$env:LOCALAPPDATA\opam"                ; 7z a "$env:GITHUB_WORKSPACE\opam-root.7z" .
          cd "$env:GITHUB_WORKSPACE"

      - name: Upload Diskuv OCaml into GitHub Workflow
        uses: actions/upload-artifact@v2
        with:
          name: diskuv-ocaml-installation
          path: |
            Programs-DiskuvOCaml.7z
            vcpkg.7z
            opam-root.7z
          retention-days: 1

  Win32-Build:
    strategy:
      matrix:
        platform:
          - windows_x86_64
        experimental: [false]
        include:
          - platform: windows_x86
            experimental: true
    runs-on: windows-2019
    env:
      DKML_BUILD_TRACE_LEVEL: "2" # For checking 260-character limit problems
    continue-on-error: ${{ matrix.experimental }}
    needs: Win32-Install-DKML
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download Diskuv OCaml Archives from GitHub Workflow
        uses: actions/download-artifact@v2
        with:
          name: diskuv-ocaml-installation

      - name: Expand Diskuv OCaml Archives
        run: |
          New-Item -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml" -ItemType Directory -Force | Out-Null
          New-Item -Path "$env:LOCALAPPDATA\vcpkg"                -ItemType Directory -Force | Out-Null
          New-Item -Path "$env:LOCALAPPDATA\opam"                 -ItemType Directory -Force | Out-Null
          cd "$env:LOCALAPPDATA\Programs\DiskuvOCaml"; 7z x -y -bt "$env:GITHUB_WORKSPACE\Programs-DiskuvOCaml.7z"
          cd "$env:LOCALAPPDATA\vcpkg"               ; 7z x -y -bt "$env:GITHUB_WORKSPACE\vcpkg.7z"
          cd "$env:LOCALAPPDATA\opam"                ; 7z x -y -bt "$env:GITHUB_WORKSPACE\opam-root.7z"
          cd "$env:GITHUB_WORKSPACE"

      - name: Cache Opam Switches
        id: cache_opam_switches
        uses: actions/cache@v2
        env:
          cache-name: cache-opam-switches
        with:
          path: |
            build/*/*/_opam
          key: ${{ runner.os }}-build-${{ env.cache-name }}-dkml-${{ hashFiles('**/.dkmlroot') }}-submodule-${{ hashFiles('.git/modules/**/diskuv-ocaml/HEAD') }}-opam-${{ hashFiles('**/.opam', '**/opam', '**.opam.lock', '**.opam.locked') }}

      - name: Install MSYS2 packages # The cache will not restore C:\msys64 packages
        run: |
          $env:PSModulePath += "$([System.IO.Path]::PathSeparator)vendor\diskuv-ocaml\installtime\windows"
          Import-Module DeploymentVersion # Get $DV_ variables
          & C:\msys64\usr\bin\env.exe MSYSTEM=MSYS /usr/bin/bash -lc ("pacman -S --needed --noconfirm " + ($DV_MSYS2PackagesArch -join " "))

      - name: Add Diskuv System PATH
        # On desktop the Diskuv System PATH would be present (the installer asks the user to close all shells sessions and start again);
        # need to make sure the same thing happens in CI. Actually, since the installer is in the previous job, the System PATH is lost as
        # we are now in a subsequent job.
        run: |
          echo "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\bin" >> $env:GITHUB_PATH

      - name: Troubleshooting (example)
        if: "false" # change to "true" when you want to need to troubleshoot a package. Change the example script as well.
        env:
          DKML_BUILD_ROOT: ${{ runner.temp }} # Use short build directory to avoid Windows 260-character absolute path limit
        run: |
          ./makeit shell SHELL_SCRIPTFILE=.github/workflows/troubleshoot-example-ppx_sexp_conv.sh

      - name: ./makeit build-${{ matrix.platform }}-Release
        env:
          DKML_BUILD_ROOT: ${{ runner.temp }} # Use short build directory to avoid Windows 260-character absolute path limit
        run: |
          ./makeit build-${{ matrix.platform }}-Release DKML_TROUBLESHOOTING_HOOK=.github/workflows/troubleshoot-example-ppx_sexp_conv.sh

      - name: ./makeit test
        env:
          DKML_BUILD_ROOT: ${{ runner.temp }} # Use short build directory to avoid Windows 260-character absolute path limit
        run: |
          ./makeit test

      - name: ./makeit dkml-report
        env:
          DKML_BUILD_ROOT: ${{ runner.temp }} # Use short build directory to avoid Windows 260-character absolute path limit
        run: |
          ./makeit dkml-report

  Unix-Build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - darwin_x86_64
        include:
          - platform: darwin_x86_64
            os: macos-11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Opam on macOS
        run: brew install gpatch && brew install opam pkg-config cmake ninja
        if: ${{ startsWith(matrix.platform, 'darwin_') }}

      - name: Cache Opam Switches
        id: cache_opam_switches
        uses: actions/cache@v2
        env:
          cache-name: cache-opam-${{ matrix.platform }}-switches
        with:
          path: |
            build/*/*/_opam
          key: ${{ runner.os }}-build-${{ env.cache-name }}-dkml-${{ hashFiles('**/.dkmlroot') }}-submodule-${{ hashFiles('.git/modules/**/diskuv-ocaml/HEAD') }}-opam-${{ hashFiles('**/.opam', '**/opam', '**.opam.lock', '**.opam.locked') }}

      - name: Troubleshooting (example)
        if: "false" # change to "true" when you want to need to troubleshoot a package. Change the example script as well.
        run: |
          ./makeit shell SHELL_SCRIPTFILE=.github/workflows/troubleshoot-example-ppx_sexp_conv.sh

      - name: ./makeit build-${{ matrix.platform }}-Release
        run: |
          ./makeit build-${{ matrix.platform }}-Release DKML_TROUBLESHOOTING_HOOK=.github/workflows/troubleshoot-example-ppx_sexp_conv.sh

      - name: ./makeit test
        run: |
          ./makeit test

      - name: ./makeit dkml-report
        run: ./makeit dkml-report
