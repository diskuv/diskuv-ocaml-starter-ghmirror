name: makeit Actions
on: [push]
jobs:
  Install-Diskuv-OCaml:
    runs-on: windows-2019
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true # Checkout the vendor/diskuv-ocaml submodule

      - name: Cache Diskuv OCaml Archives
        id: cache_diskuvocaml_archives
        uses: actions/cache@v2
        env:
          cache-name: diskuv-ocaml-archives
        with:
          path: |
            Programs-DiskuvOCaml.7z
            vcpkg.7z
            opam-root.7z
          key: ${{ runner.os }}-setup-${{ env.cache-name }}-dkml-${{ hashFiles('**/.dkmlroot') }}
          restore-keys: |
            ${{ runner.os }}-setup-${{ env.cache-name }}-
            ${{ runner.os }}-setup-
            ${{ runner.os }}-

      - name: Setup CI Container/Virtual Machine for Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: .\vendor\diskuv-ocaml\installtime\windows\setup-machine.ps1 -SkipProgress -AllowRunAsAdmin -SilentInstall

      - name: Get Visual Studio Compatibility
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          $env:PSModulePath += "$([System.IO.Path]::PathSeparator)vendor\diskuv-ocaml\installtime\windows"
          Import-Module Machine # Use Get-CompatibleVisualStudios
          $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
          $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
          $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
          $VisualStudioProps

      - name: Setup CI User for Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          $global:RedeployIfExists = $true
          $global:IncrementalDiskuvOcamlDeployment = $true
          $ErrorActionPreference = "Continue"
          .\vendor\diskuv-ocaml\installtime\windows\setup-userprofile.ps1 -SkipProgress -AllowRunAsAdmin -ForceDeploymentSlot0 -MSYS2Dir C:\msys64
          $SetupExitCode = $LastExitCode
          if ($SetupExitCode -ne 0) { # TODO: This could be part of something like: setup-userprofile.ps1 -PrintLogsOnError
            Write-Host "`n`n========= [START OF TROUBLESHOOTING] ===========`n`n"
            Get-ChildItem -Path "$env:LOCALAPPDATA\opam\log\*" -Include "*.env", "*.out" -Exclude "log-*.out", "log-*.env" | ForEach-Object { Write-Host "`n`n========= [TROUBLESHOOTING] $($_.FullName) ===========`n`n"; Get-Content -Path $_.FullName }

            # The next line is really an example ... if you need access to an extra log file that is produced by an Opam package's build scripts, then copy and paste the next line
            if (Test-Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log") { Write-Host "`n`n=========== [TROUBLESHOOTING] ocargs.log ==========="; Get-Content -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log"; }

            throw "setup-userprofile.ps1 failed with exit code $SetupExitCode. Scroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line"
          }

      - name: Archive Diskuv OCaml
        if: steps.cache_diskuvocaml_archives.outputs.cache-hit != 'true'
        run: |
          cd "$env:LOCALAPPDATA\Programs\DiskuvOCaml"; 7z a "$env:GITHUB_WORKSPACE\Programs-DiskuvOCaml.7z" .
          cd "$env:LOCALAPPDATA\vcpkg"               ; 7z a "$env:GITHUB_WORKSPACE\vcpkg.7z" .
          cd "$env:LOCALAPPDATA\opam"                ; 7z a "$env:GITHUB_WORKSPACE\opam-root.7z" .
          cd "$env:GITHUB_WORKSPACE"

      - name: Upload Diskuv OCaml into GitHub Workflow
        uses: actions/upload-artifact@v2
        with:
          name: diskuv-ocaml-installation
          path: |
            Programs-DiskuvOCaml.7z
            vcpkg.7z
            opam-root.7z
          retention-days: 1

  Build-And-Test:
    # strategy:
    #   matrix:
    #     arch:
    #       - x64     # 64-bit host for 64-bit target
    #       - x64_x86 # 64-bit host for 32-bit target
    runs-on: windows-2019
    needs: Install-Diskuv-OCaml
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download Diskuv OCaml Archives from GitHub Workflow
        uses: actions/download-artifact@v2
        with:
          name: diskuv-ocaml-installation

      - name: Expand Diskuv OCaml Archives
        run: |
          New-Item -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml" -ItemType Directory -Force | Out-Null
          New-Item -Path "$env:LOCALAPPDATA\vcpkg"                -ItemType Directory -Force | Out-Null
          New-Item -Path "$env:LOCALAPPDATA\opam"                 -ItemType Directory -Force | Out-Null
          cd "$env:LOCALAPPDATA\Programs\DiskuvOCaml"; 7z x -y -bt "$env:GITHUB_WORKSPACE\Programs-DiskuvOCaml.7z"
          cd "$env:LOCALAPPDATA\vcpkg"               ; 7z x -y -bt "$env:GITHUB_WORKSPACE\vcpkg.7z"
          cd "$env:LOCALAPPDATA\opam"                ; 7z x -y -bt "$env:GITHUB_WORKSPACE\opam-root.7z"
          cd "$env:GITHUB_WORKSPACE"

      - name: Cache Opam Switches
        id: cache_opam_switches
        uses: actions/cache@v2
        env:
          cache-name: cache-opam-switches
        with:
          path: |
            build/*/*/_opam
          key: ${{ runner.os }}-build-${{ env.cache-name }}-dkml-${{ hashFiles('**/.dkmlroot') }}-opam-${{ hashFiles('**/.opam', '**/opam', '**.opam.lock', '**.opam.locked') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: ./makeit build-dev
        run: |
          $ErrorActionPreference = "Continue"
          ./makeit build-dev DKML_BUILD_TRACE=ON
          $SetupExitCode = $LastExitCode
          if ($SetupExitCode -ne 0) { # TODO: This could be part of something like: ./makeit DKML_BUILD_PRINT_LOGS_ON_ERROR=ON
            Write-Host "`n`n========= [START OF TROUBLESHOOTING] ===========`n`n"
            Get-ChildItem -Path "$env:LOCALAPPDATA\opam\log\*" -Include "*.env", "*.out" -Exclude "log-*.out", "log-*.env" | ForEach-Object { Write-Host "`n`n========= [TROUBLESHOOTING] $($_.FullName) ===========`n`n"; Get-Content -Path $_.FullName }

            # The next line is really an example ... if you need access to an extra log file that is produced by an Opam package's build scripts, then copy and paste the next line
            if (Test-Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log") { Write-Host "`n`n=========== [TROUBLESHOOTING] ocargs.log ==========="; Get-Content -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log"; }

            throw "./makeit build-dev failed with exit code $SetupExitCode. Scroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line"
          }

      - name: ./makeit test
        run: |
          $ErrorActionPreference = "Continue"
          ./makeit test DKML_BUILD_TRACE=ON
          $SetupExitCode = $LastExitCode
          if ($SetupExitCode -ne 0) { # TODO: This could be part of something like: ./makeit DKML_BUILD_PRINT_LOGS_ON_ERROR=ON
            Write-Host "`n`n========= [START OF TROUBLESHOOTING] ===========`n`n"
            Get-ChildItem -Path "$env:LOCALAPPDATA\opam\log\*" -Include "*.env", "*.out" -Exclude "log-*.out", "log-*.env" | ForEach-Object { Write-Host "`n`n========= [TROUBLESHOOTING] $($_.FullName) ===========`n`n"; Get-Content -Path $_.FullName }

            # The next line is really an example ... if you need access to an extra log file that is produced by an Opam package's build scripts, then copy and paste the next line
            if (Test-Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log") { Write-Host "`n`n=========== [TROUBLESHOOTING] ocargs.log ==========="; Get-Content -Path "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\system\_opam\.opam-switch\build\ocamlfind.1.9.1\ocargs.log"; }

            throw "./makeit build-dev failed with exit code $SetupExitCode. Scroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line"
          }

      - name: ./makeit dkml-report
        run: ./makeit dkml-report DKML_BUILD_TRACE=ON

      - run: echo "üçè This job's status is ${{ job.status }}."
